# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PFgfclMdqkQn2y2emZgl87N-XXJn6xNF
"""


import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

data = pd.ExcelFile('dummy_npi_data.xlsx')
df = data.parse('Dataset')

df['Login Time'] = pd.to_datetime(df['Login Time'], errors = 'coerce')
df['Login Hour'] = df['Login Time'].dt.hour
df['Login Day'] = df['Login Time'].dt.day_name()

df['Likely to Respond'] = (df['Count of Survey Attempts'] > 0).astype(int)
df.head()

encoder = LabelEncoder()
df['State'] = encoder.fit_transform(df['State'])
df['Region'] = encoder.fit_transform(df['Region'])
df['Speciality'] = encoder.fit_transform(df['Speciality'])
df['Login Day'] = encoder.fit_transform(df['Login Day'])

X = df[['State', 'Region', 'Speciality', 'Login Hour', 'Login Day', 'Usage Time (mins)']]
y = df['Likely to Respond']

X = df[['State', 'Region', 'Speciality', 'Login Hour', 'Login Day', 'Usage Time (mins)']]
y = df['Likely to Respond']

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions and evaluation
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))

def predict_doctors_at_time(input_hour, model, df):
    filtered_doctors = df[df['Login Hour'] == input_hour]

    if filtered_doctors.empty:
        return None

    X_filtered = filtered_doctors[['State', 'Region', 'Speciality', 'Login Hour', 'Login Day', 'Usage Time (mins)']]
    filtered_doctors['Predicted Response'] = model.predict(X_filtered)

    best_doctors = filtered_doctors[filtered_doctors['Predicted Response'] == 1][['NPI', 'Speciality', 'Region', 'State', 'Login Hour', 'Usage Time (mins)']]

    if best_doctors.empty:
        return None

    return best_doctors

import streamlit as st
st.title("Doctor Survey Prediction App")

# Load data and train model
df = load_data()
model = train_model(df)

# Input for hour
input_hour = st.number_input("Enter the hour (0-23) to predict:", min_value=0, max_value=23, step=1)

if st.button("Predict"):
    result = predict_doctors_at_time(input_hour, model, df)
    if result is not None:
        st.write("### Doctors Likely to Respond:")
        st.dataframe(result)

        # Create a CSV for download
        csv = result.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="Download CSV",
            data=csv,
            file_name='best_doctors.csv',
            mime='text/csv',
        )
    else:
        st.write("No doctors likely to respond at this time.")

